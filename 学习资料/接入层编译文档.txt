1.安装虚拟机
    1.1下载virtualbox
        https://www.virtualbox.org/wiki/Downloads
        选择下载：  ws hosts
        安装：VirtualBox-5.2.18-124319-Win
    1.2添加虚拟电脑
        选择linux--->other linux(64-bit)
        ---->选择4G内存，80G硬盘
        ---->虚拟硬盘，选择默认，选择创建虚拟硬盘C
        ---->虚拟硬盘文件类型，选择默认VDI(virtual box 磁盘映像)
        ---->存储在物理硬盘上，选择默认 动态分配
        ---->创建虚拟硬盘，大小80G
     1.3下载iso文件
        virtualbox安装centos7,参考网址：https://www.cnblogs.com/hihtml5/p/8217062.html
        centos官网下载centos
        http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1804.iso         
        注意事项：
            记得点击网络连接开启
            选择最后一个图形界面安装
            在关闭虚拟机的情况下，给virtualbox添加网络连接网卡：第一个为外网连接（默认-网络地址转换NAT），增加一个内外连接的网卡（仅主机网络）
      1.4添加虚拟电脑，指定centos位置。      
2.安装xshell5,内外连接虚拟机 (ifconfig显示的ip)
3.搭建编译环境
    3.1安装rzsz：yum install lrzsz
    3.2安装gcc：yum install gcc;
                        yum install gcc-c++;
    3.3安装scons：
                        wget http://prdownloads.sourceforge.net/scons/scons-2.5.0.tar.gz
                        tar zxvf scons-2.5.0.tar.gz
                        cd scons-2.5.0/
                        python setup.py install
                        scons -v    //检查是否安装成功
    3.4 protoc命令安装        
        3.4.3执行scons命令报错，protoc版本过高，高于2.6.0，只允许2.6.0版本。
          11 #if GOOGLE_PROTOBUF_VERSION < 2006000
          12 #error This file was generated by a newer version of protoc which is
          13 #error incompatible with your Protocol Buffer headers.  Please update
          14 #error your headers.
          15 #endif
          16 #if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
          17 #error This file was generated by an older version of protoc which is
          18 #error incompatible with your Protocol Buffer headers.  Please
          19 #error regenerate this file with a newer version of protoc.
          20 #endif

        3.4.6重新安装protobuf2.6.0版本：
            #tar -xf  protobuf-all-2.6.0.tar.gz
            #cd protobuf-2.6.0
            #./configure    --prefix=/home/apps/local
            #make
            #make check
            #make install
            查看位置：which protoc 
             建立软链接： ln -s /usr/local/bin/protoc /home/apps/local/bin/protoc
        3.4.7再次执行scons，报错解除
3.5 thrift安装          http://thrift.apache.org/docs/install/centos
        3.5.1 更新系统：
            sudo yum -y update
        3.5.2 Install the Platform Development Tools
            sudo yum -y groupinstall "Development Tools"
        3.5.3 Upgrade autoconf/automake/bison
            sudo yum install -y wget
        3.5.4 Upgrade autoconf
            wget http://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.gz
            tar xvf autoconf-2.69.tar.gz
            cd autoconf-2.69
            ./configure --prefix=/usr
            make
            sudo make install
            cd ..
        3.5.5 Upgrade automake
            wget http://ftp.gnu.org/gnu/automake/automake-1.14.tar.gz
            tar xvf automake-1.14.tar.gz
            cd automake-1.14
            ./configure --prefix=/usr
            make
           sudo make install
            cd ..
        3.5.6 Upgrade bison
            wget http://ftp.gnu.org/gnu/bison/bison-2.5.1.tar.gz
            tar xvf bison-2.5.1.tar.gz
            cd bison-2.5.1
            ./configure --prefix=/usr
            make
            sudo make install
            cd ..
        3.5.7 Add Optional C++ Language Library Dependencies
            All languages require the Apache Thrift IDL Compiler and at this point everything needed to make the IDL Compiler is installed.
            If you will be developing Apache Thrift clients/servers in C++ you will also need additional packages to support the C++ shared library build.
        3.5.8 Install C++ Lib Dependencies
            sudo yum -y install libevent-devel zlib-devel openssl-devel
        3.5.9 Upgrade Boost >= 1.53      ----改成1.61版本，与线上一致，190902
            wget http://sourceforge.net/projects/boost/files/boost/1.53.0/boost_1_53_0.tar.gz
            tar xvf boost_1_63_0.tar.gz
            cd boost_1_63_0
            ./bootstrap.sh
            sudo ./b2 install
            （ 默认安装头文件在目录/usr/local/include，而库文件在目录/usr/local/lib）
        3.5.10 Build and Install the Apache Thrift IDL Compiler            ----选择0,10,0版本进行编译
            git clone https://git-wip-us.apache.org/repos/asf/thrift.git
            cd thrift
            ----0.11.0版本需要：                ./bootstrap.sh                                                                                                //此步骤不可省略，否则报错
            ./configure   --with-boost=/usr/local //此处指定安装的boost库的路径。。。
                （ln -s /usr/local/lib/libboost_unit_test_framework.a /usr/local/lib64/）
            make
            sudo make install 
            
            报错如下：
            Don't run Bundler as root. Bundler can ask for sudo if it is needed, and installing your bundle as root will break this application for all non-root users on this machine.
            Fetching gem metadata from http://rubygems.org/...........
            Resolving dependencies...
            Using rake 10.5.0
            Using bundler 1.7.8
            Using daemons 1.2.6
            Using diff-lcs 1.3
            Using eventmachine 1.2.7
            Using rack 1.6.10

            Gem::InstallError: rack-test requires Ruby version >= 2.2.2.
            An error occurred while installing rack-test (0.8.3), and Bundler cannot continue.
            Make sure that `gem install rack-test -v '0.8.3'` succeeds before bundling.
            make[2]: *** [all-local] 错误 5
            make[2]: 离开目录“/data/soft_pkg/thrift-0.11.0/lib/rb”
            make[1]: *** [install-recursive] 错误 1
            make[1]: 离开目录“/data/soft_pkg/thrift-0.11.0/lib”
            make: *** [install-recursive] 错误 1
    
            解决办法：升级ruby:
                下载包：http://www.ruby-lang.org/en/downloads/
                tar -xvzf ruby-2.5.1.tgz -C /usr/local   
                cd /usr/local/ruby-2.5.1
                现在，配置并编译源代码，如下所示：
                $ ./configure
                $ make
                $ sudo make install
                建立软链接：
                which ruby
                cp /bin/ruby /bin/ruby20
                rm -rf /bin/ruby
                ln -s  /usr/local/ruby-2.5.1/ruby  /bin/ruby
                保存ruby之前的版本，建立虚拟的软链接。       
　             升级RubyGems的版本：gem update --system       
            再次make,make install,报错如下：
                查看版本正常， 影响使用（头文件缺失），后重新改用0.10.0版本编译正常使用。
            Failures:
              1) Struct Thrift::Struct should support optional type-checking in Thrift::Struct.new
                 Failure/Error: lambda { SpecNamespace::Hello.new(:greeting => 3) }.should raise_error(Thrift::TypeError, "Expected Types::STRING, received Fixnum for field greeting")
                   expected Thrift::TypeError with "Expected Types::STRING, received Fixnum for field greeting", got #<Thrift::TypeError: Expected Types::STRING, received Integer for field greeting> 

            with backtrace:
                 # ./lib/thrift/types.rb:69:in `check_type'
                 # ./lib/thrift/struct.rb:42:in `block in initialize'
                 # ./lib/thrift/struct.rb:38:in `each'
                 # ./lib/thrift/struct.rb:38:in `initialize'
                 # ./spec/struct_spec.rb:230:in `new'
                 # ./spec/struct_spec.rb:230:in `block (4 levels) in <top (required)>'
                 # ./spec/struct_spec.rb:230:in `block (3 levels) in <top (required)>'
                # ./spec/struct_spec.rb:230:in `block (3 levels) in <top (required)>'

            2) Struct Thrift::Struct should support optional type-checking in field accessors
             Failure/Error: lambda { hello.greeting = 3 }.should raise_error(Thrift::TypeError, "Expected Types::STRING, received Fixnum for field greeting")
               expected Thrift::TypeError with "Expected Types::STRING, received Fixnum for field greeting", got #<Thrift::TypeError: Expected Types::STRING, received Integer for field greeting> with backtrace:
                 # ./lib/thrift/types.rb:69:in `check_type'
                 # ./lib/thrift/struct.rb:157:in `block in field_accessor'
                 # ./spec/struct_spec.rb:241:in `block (4 levels) in <top (required)>'
                 # ./spec/struct_spec.rb:241:in `block (3 levels) in <top (required)>'
             # ./spec/struct_spec.rb:241:in `block (3 levels) in <top (required)>'

            3) Thrift::Types type checking should give the Thrift::TypeError a readable message
             Failure/Error: lambda { Thrift.check_type(3, {:type => Thrift::Types::STRING}, :foo) }.should raise_error(Thrift::TypeError, msg)
               expected Thrift::TypeError with "Expected Types::STRING, received Fixnum for field foo", got #<Thrift::TypeError: Expected Types::STRING, received Integer for field foo> with backtrace:
                 # ./lib/thrift/types.rb:69:in `check_type'
                 # ./spec/types_spec.rb:101:in `block (4 levels) in <top (required)>'
                 # ./spec/types_spec.rb:101:in `block (3 levels) in <top (required)>'
             # ./spec/types_spec.rb:101:in `block (3 levels) in <top (required)>'

            Finished in 4.34 seconds
            411 examples, 3 failures, 1 pending

            Failed examples:
            rspec ./spec/struct_spec.rb:227 # Struct Thrift::Struct should support optional type-checking in Thrift::Struct.new
            rspec ./spec/struct_spec.rb:237 # Struct Thrift::Struct should support optional type-checking in field accessors
            rspec ./spec/types_spec.rb:99 # Thrift::Types type checking should give the Thrift::TypeError a readable message
            rake aborted!
            /usr/local/bin/ruby -S rspec ./spec/base_protocol_spec.rb ./spec/base_transport_spec.rb ./spec/binary_protocol_accelerated_spec.rb ./spec/binary_protocol_spec.rb                             ./spec/bytes_spec.rb ./spec/client_spec.rb ./spec/compact_protocol_spec.rb ./spec/exception_spec.rb ./spec/flat_spec.rb ./spec/http_client_spec.rb ./spec/json_protocol_spec.rb ./spec/namespaced_spec.rb ./spec/nonblocking_server_spec.rb ./spec/processor_spec.rb ./spec/serializer_spec.rb ./spec/server_socket_spec.rb ./spec/server_spec.rb ./spec/socket_spec.rb ./spec/ssl_socket_spec.rb ./spec/struct_nested_containers_spec.rb ./spec/struct_spec.rb ./spec/thin_http_server_spec.rb ./spec/types_spec.rb ./spec/union_spec.rb ./spec/unix_socket_spec.rb --color --format d failed
            /usr/local/bin/bundle:30:in `block in <main>'
            /usr/local/bin/bundle:22:in `<main>'
            Tasks: TOP => install => gem => spec => realspec
            (See full trace by running task with --trace)
            make[4]: *** [install-exec-hook] 错误 1
            make[4]: 离开目录“/data/soft_pkg/thrift-0.11.0/lib/rb”
            make[3]: *** [install-exec-am] 错误 2
            make[3]: 离开目录“/data/soft_pkg/thrift-0.11.0/lib/rb”
            make[2]: *** [install-am] 错误 2
            make[2]: 离开目录“/data/soft_pkg/thrift-0.11.0/lib/rb”
            make[1]: *** [install-recursive] 错误 1
            make[1]: 离开目录“/data/soft_pkg/thrift-0.11.0/lib”
            make: *** [install-recursive] 错误 1
            [root@localhost thrift-0.11.0]# thrift -version
            Thrift version 0.11.0

        建立好软链接：ln -s /usr/local/bin/thrift /home/apps/local/bin/thrift
        
        重新选择0.10.0进行编译安装，正常！！！

3.6安装log4cplus
     确保你的项目Makefile中包含 /usr/local/lib/liblog4cplus.a（静态库）或  -llog4cplus（动态库）即可，头文件在/usr/local/include/log4cplus目录下。cd log4cplus-x.x.x
    ./configure --prefix=/usr/local
    make
    sudo make install
    ldconfig 
3.7thrift头文件查找失败
    scons -c   clean
    scons
    Scons报错：thrift/thrift_client_new.h:5:39: fatal error: concurrency/ThreadManager.h: No such file or directory             ---#include <concurrency/ThreadManager.h>
   重新选择thrift0,10,0版本进行编译，头文件完整，报错解除。
3.8安装mysqlclient
    requirement:
     sudo yum install python-devel mysql-devel    
3.9安装redis
    下载安装包：http://download.redis.io/releases/
    tar -zxvf redis-4.0.10.tar.gz
    cd redis-4.0.10
    make MALLOC=libc
    make install
    
    添加头文件软链接到当前工程common子目录下：ln -s /data/soft_pkg/redis-4.0.10/deps/hiredis  /data/access_server/src/common/hiredis
    make install安装完成后，会在/usr/local/bin目录下生成下面几个可执行文件，它们的作用分别是：
        redis-server：Redis服务器端启动程序  
        redis-cli：Redis客户端操作工具。也可以用telnet根据其纯文本协议来操作  
        redis-benchmark：Redis性能测试工具  
        redis-check-aof：数据修复工具  
        redis-check-dump：检查导出工具
     配置redis:   ----略
3.10安装kafka服务器   ---忽略
    下载安装包：http://kafka.apache.org/downloads
        解压安装
        tar -zvxf kafka_2.11-2.0.0.tgz -C /usr/local/
        cd /usr/local//usr/local/kafka_2.11-2.0.0/
        修改配置文件
         vim config/server.properties 1
        修改其中
        broker.id=1
        log.dirs=data/kafka-logs
        启动zookeeper
        使用安装包中的脚本启动单节点Zookeeper实例：
        bin/zookeeper-server-start.sh -daemon config/zookeeper.properties1
        启动Kafka服务
        使用kafka-server-start.sh启动kafka服务：
        bin/kafka-server-start.sh config/server.properties1
        创建Topic
        使用kafka-topics.sh 创建单分区单副本的topic test
        bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test1
        查看Topic
        bin/kafka-topics.sh --list --zookeeper localhost:2181
3.11安装kafka c++客户端 librdkafka
    下载： https://github.com/edenhill/librdkafka
    解压后：
    ./configure
    make
    sudo make install
3.12安装jsoncpp库
    下载地址：
        https://sourceforge.net/projects/jsoncpp/files/latest/download
    tar zxvf jsoncpp-0.5.0.tar.gz
    cd jsoncpp-0.5.0
    scons platform=linux-gcc    
        路径设置：
        把生成的.a和.so文件拷贝到/usr/lib64目录下。
        建立头文件软链接：ln -s /data/soft_pkg/jsoncpp-src-0.5.0/include/json  /usr/local/include/json
3.13 安装redisc++客户端hiredis
    scons链接报错
    /bin/ld: cannot find -ljsoncpp
    /bin/ld: cannot find -lhiredis
    /bin/ld: cannot find -lredisclient
    collect2: error: ld returned 1 exit status
    下载地址：https://github.com/redis/hiredis/releases
    1.解压：tar -zxvf hiredis-0.13.3.tar.gz ; cd hiredis-0.13.3;
    2、编译：make
    3、安装：sudo make install
    4、新建一个文件夹RedisTest：mkdir RedisTest
    5、新建一个RedisTest.c文件：vim RedisTest.c
3.14 添加库到指定路径：redisclient和jsoncpp的静态库
3.15 ldd查看缺少链接库  
    liblog4cplus-1.2.so.5 => not found
    libboost_system.so.1.63.0 => not found
    libevent-2.0.so.5 => /lib64/libevent-2.0.so.5 (0x00007fac18ee9000)
    libthrift-0.10.0.so => not found
    libboost_thread.so.1.63.0 => not found
    libevent_pthreads-2.0.so.5 => /lib64/libevent_pthreads-2.0.so.5 (0x00007fac18ce6000)
    libthriftnb-0.10.0.so => not found
    libcrypto.so.10 => /lib64/libcrypto.so.10 (0x00007fac18885000)
    libprotobuf.so.9 => not found
    libhiredis.so.0.13 => not found
    librdkafka++.so.1 => not found
    librdkafka.so.1 => not found
处理：修改默认
    在环境变量 LD_LIBRARY_PATH 中指明库的搜索路径。
    设置方式：
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/apps/lib:/home/apps/local/mysql/lib:/home/apps/local/lib64/
    可以用下面的命令查看 LD_LIBRAY_PATH 的设置内容：
    echo $LD_LIBRARY_PATH
    执行ldconfig使其生效。

    修改文件：vim /etc/ld.so.conf
    增加3行信息如下
        /home/apps/lib
        /home/apps/local/mysql/lib
        /home/apps/local/lib64/
    然后运行 /sbin/ldconfig，以达到刷新 /etc/ld.so.cache的效果

3.14将apps压缩包放在/home目录下，解压即可。 （将工程的app.tar.gz打包文件解压到/home下，重新编译。）
    编译运行正常。




